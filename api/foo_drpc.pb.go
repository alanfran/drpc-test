// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.21
// source: foo.proto

package api

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_foo_proto struct{}

func (drpcEncoding_File_foo_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_foo_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_foo_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_foo_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCFooBarClient interface {
	DRPCConn() drpc.Conn

	GetFoo(ctx context.Context, in *GetFooRequest) (*Foo, error)
}

type drpcFooBarClient struct {
	cc drpc.Conn
}

func NewDRPCFooBarClient(cc drpc.Conn) DRPCFooBarClient {
	return &drpcFooBarClient{cc}
}

func (c *drpcFooBarClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcFooBarClient) GetFoo(ctx context.Context, in *GetFooRequest) (*Foo, error) {
	out := new(Foo)
	err := c.cc.Invoke(ctx, "/foo.FooBar/GetFoo", drpcEncoding_File_foo_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCFooBarServer interface {
	GetFoo(context.Context, *GetFooRequest) (*Foo, error)
}

type DRPCFooBarUnimplementedServer struct{}

func (s *DRPCFooBarUnimplementedServer) GetFoo(context.Context, *GetFooRequest) (*Foo, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

type DRPCFooBarDescription struct{}

func (DRPCFooBarDescription) NumMethods() int { return 1 }

func (DRPCFooBarDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/foo.FooBar/GetFoo", drpcEncoding_File_foo_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCFooBarServer).
					GetFoo(
						ctx,
						in1.(*GetFooRequest),
					)
			}, DRPCFooBarServer.GetFoo, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterFooBar(mux drpc.Mux, impl DRPCFooBarServer) error {
	return mux.Register(impl, DRPCFooBarDescription{})
}

type DRPCFooBar_GetFooStream interface {
	drpc.Stream
	SendAndClose(*Foo) error
}

type drpcFooBar_GetFooStream struct {
	drpc.Stream
}

func (x *drpcFooBar_GetFooStream) SendAndClose(m *Foo) error {
	if err := x.MsgSend(m, drpcEncoding_File_foo_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
